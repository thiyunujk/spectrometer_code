# -*- coding: utf-8 -*-
"""mlmodelSpectrom.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1wIE4osi8rsqQnfEwyPnxsTH9lQ4T3rSL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from tensorflow import keras

# Load the CSV file
csv_file_path = "processed_data.csv"
df = pd.read_csv(csv_file_path, sep=';', header=0)

df.head(3)

# Split the data into features and labels
X = df['features'].str.split(',', expand=True).astype(float)
y = df['label']

# Normalize the features
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = keras.Sequential([
    keras.layers.Dense(128, activation='relu', input_shape=(X_train.shape[1],)),
    keras.layers.Dense(64, activation='relu'),
    keras.layers.Dense(len(np.unique(y)), activation='softmax')  # Number of unique classes in y
])

model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(X_train, y_train, epochs=8, batch_size=32, validation_data=(X_test, y_test))

test_loss, test_acc = model.evaluate(X_test, y_test)
print(f'Test accuracy: {test_acc}')

from matplotlib import pyplot as plt

# Assuming you have already trained the model and stored the history in the 'history' variable

# Extract accuracy and loss values
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

# Plot the loss
fig = plt.figure()
plt.plot(loss, color='teal', label='Training Loss')
plt.plot(val_loss, color='orange', label='Validation Loss')
fig.suptitle('Loss', fontsize=20)
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(loc='upper right')
plt.show()

# Plot the accuracy
fig = plt.figure()
plt.plot(acc, color='teal', label='Training Accuracy')
plt.plot(val_acc, color='orange', label='Validation Accuracy')
fig.suptitle('Accuracy', fontsize=20)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend(loc='lower right')
plt.show()

# Save the model
model.save("classification_model.h5")

loaded_model = keras.models.load_model("classification_model.h5")

csv_file_path = "raw.csv"
df = pd.read_csv(csv_file_path, sep=';', header=0)
new_data = df['features'].str.split(',', expand=True).astype(float)
new_data = scaler.transform(new_data)
predictions = loaded_model.predict(new_data)
print(predictions)

predicted_class = np.argmax(predictions)

if predicted_class == 0:
    print("Fruit belongs to raw class")
elif predicted_class == 1:
    print("Fruit belongs to intermediate class")
else:
    print("Fruit belongs to ripe class")

print("Predicted Class:", predicted_class)

csv_file_path = "ripe.csv"
df = pd.read_csv(csv_file_path, sep=';', header=0)
new_data = df['features'].str.split(',', expand=True).astype(float)
new_data = scaler.transform(new_data)
predictions = loaded_model.predict(new_data)

predicted_class = np.argmax(predictions)

if predicted_class == 0:
    print("Fruit belongs to raw class")
elif predicted_class == 1:
    print("Fruit belongs to intermediate class")
else:
    print("Fruit belongs to ripe class")

print("Predicted Class:", predicted_class)



print(predictions)



csv_file_path = "intermediate.csv"
df = pd.read_csv(csv_file_path, sep=';', header=0)
new_data = df['features'].str.split(',', expand=True).astype(float)
new_data = scaler.transform(new_data)
predictions = loaded_model.predict(new_data)
print(predictions)

predicted_class = np.argmax(predictions)

if predicted_class == 0:
    print("Fruit belongs to raw class")
elif predicted_class == 1:
    print("Fruit belongs to intermediate class")
else:
    print("Fruit belongs to ripe class")

print("Predicted Class:", predicted_class)